@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using Capstone.Web.Models;

@model Deck

<script type="text/javascript" src="../../Scripts/CardScripts/EditDeck.js"></script>

<h2 class="title">Edit Deck</h2>

<!--Edit deck name-->
@using (Html.BeginForm("EditDeckName", "Deck", FormMethod.Post))
{
    if (ViewBag.AddedCard != null)
    {
        <div class="successMsg">
            <span class="checkmark">&#10003;</span> Your card for <b>@ViewBag.AddedCard.Front</b> was successfully added.
            <b>@Html.ActionLink("Click here", "CardView", "Card")</b> to return to card view.
        </div>

    }

    <div>
        @Html.Label("Name", "Deck Name: ")

        @Html.TextBoxFor(m => m.Name)

        @Html.HiddenFor(m => m.DeckID)

        <button class="list_item btn">Change Name</button>
    </div>
}

<!--Add a tag to the deck-->
<div class="allTags">
    @foreach (string tag in Model.ThisDeckTags)
    {
        <span class="added_tag">@tag</span>

        using (Html.BeginForm("RemoveDeckTag", "Deck", new { tagName = tag, deckID = Model.DeckID }, FormMethod.Post, new { @class = "remove_tag_action" }))
        {
            @Html.HiddenFor(m => Model.DeckID)

            <span id="@tag" class="remove_tag">x</span>
        }
    }

    <div class="addtag">add tag to deck</div>

    @foreach (string tag in Model.AllTags)
    {
        if (!Model.ThisDeckTags.Contains(tag))
        {
            using (Html.BeginForm("AddDeckTag", "Deck", new { tagName = tag, deckID = Model.DeckID }, FormMethod.Post, new { @class = "add_tag_action" }))
            {
                <span id="@tag" class="add_tag inactive_tag">@tag</span>
            }
        }
    }

    <div class="createtag">create new tag for deck</div>

    <div>
        @using (Html.BeginForm("CreateDeckTag", "Deck", FormMethod.Post))
        {
            <input name="TagName" />

            @Html.HiddenFor(m => Model.DeckID)

            <input type="submit" class="list_item btn" value="Add New Tag">
        }
    </div>
</div>

<!--Lists cards in deck for review or removal-->

<div class="card_flex_container">

@if (Model.DeckCards.Count != 0)
{
    foreach (var card in Model.DeckCards)
    {
        <div class="card_bothsides">

            <div class="card_front">@card.Front</div>

            <div class="card_back">@card.Back</div>

            <ul class="card_options">
                <li>
                    @Html.ActionLink("Remove Card", "RemoveThisCard", new { id = card.CardID }, null)
                </li>
                <li>
                    @Html.ActionLink("Modify this card", "CardModify", "Card", new { id = card.CardID }, null)
                </li>
            </ul>

        </div>
    }

}
else
{
    <p>There are no cards in this deck.  Add some above.</p>
}

</div>